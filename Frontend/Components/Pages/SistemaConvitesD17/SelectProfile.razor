@page "/SelectProfile"
@rendermode InteractiveServer

<PageTitle>Select Profile</PageTitle>

<link href="CssD17/SelectProfile.css" rel="stylesheet"/>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

<div class="containerSelectProfile">
    <div class="containerTitulo">
        <h1 class="textoTitulo">Select Candidates</h1>
    </div>
    <div class="containerBarraPesquisa">
        <div class="barraPesquisa">
            <input @bind="searchText" @bind:event="oninput" placeholder="Search Any Field ..." class="inputBarraPesquisa" />
        </div>
        <div class="containerIconeLupa">
            <i @onclick="SearchCandidates" class="fas fa-search"></i>
        </div>
    </div>
    <div class="containerResultNumber">
        <div class="textoResultNumber">Results (@filteredCandidates.Count)</div>
    </div>
    <div class="containerTabela">
        <div class="containerRowTituloTabela">
            <div class="containerTextoTabelas">
                <h1 class="textoRowTituloTabela">First Name</h1>
            </div>
            <div class="containerTextoTabelas">
                <h1 class="textoRowTituloTabela">Last Name</h1>
            </div>
            <div class="containerTextoTabelas">
                <h1 class="textoRowTituloTabela">Location</h1>
            </div>
            <div class="containerTextoTabelas">
                <h1 class="textoRowTituloTabela">Email</h1>
            </div>
        </div>
        <div class="linha"></div>
        @foreach (var candidate in filteredCandidates)
        {
        var rowClass = (filteredCandidates.IndexOf(candidate) % 2 == 0) ? "corLinhaPar" : "corLinhaImpar";
        <NavLink href="ReachOutProfile">
            <div class="containerRowDadosTabela @rowClass">
                <div class="containerTextoTabelas">
                    <h1 class="textoRowDadosTabelaColuna1">@candidate[0]</h1>
                </div>
                <div class="containerTextoTabelas">
                    <h1 class="textoRowDadosTabela">@candidate[1]</h1>
                </div>
                <div class="containerTextoTabelas">
                    <h1 class="textoRowDadosTabela">@candidate[2]</h1>
                </div>
                <div class="containerTextoTabelas">
                    <h1 class="textoRowDadosTabela">@candidate[3]</h1>
                </div>
            </div>
        </NavLink>
        }
    </div>
    <div class="containerGridImagens">
        
    </div>
</div>

@code {
    private string activeFilter = "First Name";
    private string searchText = string.Empty;
    private List<string[]> filteredCandidates;
    private bool isSearchPerformed = false;
    
    private void SetActiveFilter(string filter)
    {
        activeFilter = filter;
    }

    private string GetActiveClass(string filter)
    {
        return activeFilter == filter ? "active" : string.Empty;
    }

    string[][] candidates = new string[][]
    {
        new string[] { "John", "Doe", "New York City", "john.doe@google.com" },
        new string[] { "Jane", "Smith", "San Francisco", "jane.smith@facebook.com" },
        new string[] { "Mike", "Jones", "Seattle", "mike.jones@amazon.com" },
        new string[] { "Emily", "Davis", "Redmond", "emily.davis@microsoft.com" },
        new string[] { "Chris", "Wilson", "Los Gatos", "chris.wilson@netflix.com" },
        new string[] { "Sarah", "Brown", "San Francisco", "sarah.brown@twitter.com" },
        new string[] { "David", "Johnson", "Sunnyvale", "david.johnson@linkedin.com" },
        new string[] { "Laura", "White", "San Francisco", "laura.white@uber.com" },
        new string[] { "James", "Baker", "Seattle", "james.baker@aws.com" },
        new string[] { "Alice", "Green", "San Francisco", "alice.green@openai.com" },
        new string[] { "Oliver", "Harris", "San Jose", "oliver.harris@cisco.com" },
        new string[] { "Sophia", "Martinez", "Armonk", "sophia.martinez@ibm.com" },
        new string[] { "Liam", "Thompson", "Dallas", "liam.thompson@att.com" },
        new string[] { "Emma", "Rodriguez", "Redwood City", "emma.rodriguez@oracle.com" },
        new string[] { "Noah", "Moore", "Santa Clara", "noah.moore@intel.com" },
        new string[] { "Mia", "Taylor", "San Jose", "mia.taylor@adobe.com" },
        new string[] { "Benjamin", "Anderson", "San Francisco", "benjamin.anderson@salesforce.com" },
        new string[] { "Charlotte", "Jackson", "Palo Alto", "charlotte.jackson@hp.com" },
        new string[] { "Amelia", "Evans", "New York City", "amelia.evans@spotify.com" },
        new string[] { "Daniel", "Wright", "Redwood City", "daniel.wright@ea.com" },
        new string[] { "Luc", "Bernier", "Lisbon, Portugal", "luc@mail.com"}
    };

    protected override void OnInitialized()
    {
        filteredCandidates = candidates.ToList();
    }

    private void SearchCandidates()
    {
        isSearchPerformed = true;
        if (string.IsNullOrWhiteSpace(searchText))
        {
            filteredCandidates = candidates.ToList();
        }
        else
        {
            filteredCandidates = candidates.Where(candidate => candidate.Any(field => field.Contains(searchText, StringComparison.OrdinalIgnoreCase))).ToList();
        }
    }
}