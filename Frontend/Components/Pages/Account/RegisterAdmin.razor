@page "/register-admin"
@using ESOF.WebApp.DBLayer.Entities
@using Frontend.Components.Layout
@using Frontend.Models.ViewModels
@using Frontend.Services.Contracts
@layout MainLayout
@rendermode InteractiveServer
@inject IRegisterService RegisterService

<PageTitle>Register Admin</PageTitle>

<AuthorizeView Roles="Admin">
    <Authorized Context="_">
        <div class="container mt-4">
            <div class="row">
                <div class="col-md-6 offset-md-3">
                    <div class="card">
                        <div class="card-body">
                            <EditForm Model="@RegisterModel" OnValidSubmit="HandleRegistration" FormName="RegisterAdminForm">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="text-danger" />

                                @if (!string.IsNullOrEmpty(EmailExistsError))
                                {
                                    <div class="alert alert-danger">@EmailExistsError</div>
                                }
                                @if (!string.IsNullOrEmpty(GeneralError))
                                {
                                    <div class="alert alert-danger">@GeneralError</div>
                                }

                                <div class="mb-3 text-center">
                                    <h3>Register Admin</h3>
                                </div>

                                <div class="mb-3">
                                    <label for="email" class="form-label">Email</label>
                                    <InputText id="email" @bind-Value="RegisterModel.Email" class="form-control" placeholder="Email" />
                                    <ValidationMessage For="() => RegisterModel.Email" class="text-danger" />
                                </div>

                                <div class="mb-3">
                                    <label for="password" class="form-label">Password</label>
                                    <InputText id="password" @bind-Value="RegisterModel.Password" class="form-control" placeholder="Password" type="password" />
                                    <ValidationMessage For="() => RegisterModel.Password" class="text-danger" />
                                </div>

                                <div class="mb-3 d-grid gap-2">
                                    <button type="submit" class="btn btn-primary">Register</button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    
    <NotAuthorized>
        <div class="container mt-4">
            <div class="row">
                <div class="col-md-6 offset-md-3">
                    <div class="card">
                        <div class="card-body text-center">
                            <span class="text-danger fw-bolder">You don't have permission to access this page.</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private RegisterAdminViewModel RegisterModel { get; set; } = new();
    private string? EmailExistsError { get; set; }
    private string? GeneralError { get; set; }

    private async Task HandleRegistration()
    {
        var (passwordHash, passwordSalt) = CreatePasswordHash(RegisterModel.Password);
        
        var user = new User
        {
            Email = RegisterModel.Email,
            PasswordHash = passwordHash,
            PasswordSalt = passwordSalt,
            UserRoles = new List<UserRole>()
        };
        
        Console.WriteLine("Registering admin...");
        Console.WriteLine($"Email: {user.Email}");

        try
        {
            await RegisterService.RegisterAdminAsync(user);
            RegisterModel = new RegisterAdminViewModel();
            EmailExistsError = null;
            GeneralError = null;
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Conflict)
        {
            EmailExistsError = "Email already exists.";
            GeneralError = null; 
        }
        catch (Exception ex)
        {
            GeneralError = "An error occurred while registering. Please try again.";
            EmailExistsError = null; 
        }
    }
    
    private static (byte[] passwordHash, byte[] passwordSalt) CreatePasswordHash(string password)
    {
        using var hmac = new System.Security.Cryptography.HMACSHA512();
        var passwordSalt = hmac.Key;
        var passwordHash = hmac.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));
        return (passwordHash, passwordSalt);
    }
}
