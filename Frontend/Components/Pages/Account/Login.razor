@layout LoginLayout
@page "/login"
@using System.Security.Claims
@using System.Security.Cryptography
@using ESOF.WebApp.DBLayer.Context
@using Frontend.Components.Layout
@using Frontend.Models.ViewModels
@using Microsoft.AspNetCore.Authentication

@using Microsoft.AspNetCore.Authentication.Cookies
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <h3>Login</h3>
            </div>
            <div class="mb-3">
                <label>Email</label>
                <InputText @bind-value="Model.Email" class="form-control" placeholder="Email" />
                <ValidationMessage For="() => Model.Email" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-value="Model.Password" class="form-control" placeholder="Password" type="password" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@_errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }
    
    [SupplyParameterFromForm] 
    public LoginViewModel Model { get; set; } = new();
    
    private string? _errorMessage;
    
    private static ApplicationDbContext ApplicationDbContext => new();
    
    private async Task Authenticate()
    {
        if (Model.Password != null)
        {
            var passwordHash = HashPassword(Model.Password);
        
            var userAccount = ApplicationDbContext.Users.FirstOrDefault(x => x.Email == Model.Email);
            if (userAccount is null || userAccount.PasswordHash != passwordHash)
            {
                _errorMessage = "Invalid email or password";
                return;
            }
        
            var userRole = ApplicationDbContext.UserRoles
                .Where(ur => ur.UserId == userAccount.UserId)
                .Select(ur => ur.Role)
                .FirstOrDefault();

            if (userRole is null)
            {
                _errorMessage = "User has no role";
                return;
            }
        
            var role = ApplicationDbContext.Roles
                .Where(r => r.RoleId == userRole.RoleId)
                .Select(r => r.Name)
                .FirstOrDefault();

            if(role is null)
            {
                _errorMessage = "Role not found";
                return;
            }
        
            var claims = new List<Claim>
            {
                new(ClaimTypes.Name, userAccount.Email),
                new(ClaimTypes.Role, role)
            };
        
            var identiy = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identiy);
            if (HttpContext != null) await HttpContext.SignInAsync(principal);
        }

        NavigationManager.NavigateTo("/");
    }
    
    private static byte[] HashPassword(string password)
    {
        using var hmac = new HMACSHA512();
        return hmac.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));
    }
 
}   

