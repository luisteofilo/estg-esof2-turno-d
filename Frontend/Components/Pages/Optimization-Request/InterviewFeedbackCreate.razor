@page "/create-interview-feedback"
@rendermode InteractiveServer
@using Frontend.Helpers
@using Common.Dtos.Optimization_Requests
@using System.Text.Json
@using System.Text
@attribute [StreamRendering]
@inject HttpClient HttpClient

<PageTitle>Create Interview Feedback</PageTitle>

<h1>Create Interview Feedback</h1>

<p>Fill out the form below to create interview feedback:</p>

<form @onsubmit="HandleSubmit">
    <div class="form-group">
        <label for="InterviewFeedbackId">Interview Feedback ID:</label>
        <input id="InterviewFeedbackId" class="form-control" @bind="@newFeedback.InterviewFeedbackId" />
    </div>
    <div class="form-group">
        <label for="candidate">Candidate Name:</label>
        <input id="candidate" class="form-control" @bind="@newFeedback.Candidate" />
    </div>
    <div class="form-group">
        <label for="interviewer">Interviewer Name:</label>
        <input id="interviewer" class="form-control" @bind="@newFeedback.Interviewer" />
    </div>
    <div class="form-group">
        <label for="interview">Interview Name:</label>
        <input id="interview" class="form-control" @bind="@newFeedback.Interview" />
    </div>
    <div class="form-group">
        <label for="Job">Job Position:</label>
        <input id="Job" class="form-control" @bind="@newFeedback.JobId" />
    </div>
    <div class="form-group">
        <label for="feedback">Feedback:</label>
        <textarea id="feedback" class="form-control" @bind="@newFeedback.Feedback"></textarea>
    </div>
    <div class="form-group">
        <label for="rejectionReason">Rejection Reason:</label>
        <input id="rejectionReason" class="form-control" @bind="@newFeedback.RejectionReason" />
    </div>
    <div class="form-group">
        <label for="optimization">Optimization Suggestions:</label>
        <input id="optimization" class="form-control" @bind="@newFeedback.OptimizationSuggestions" />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</form>

@if (isSubmitting)
{
    <p>
        <em>Submitting...</em>
    </p>
}

@if (submitError != null)
{
    <p class="text-danger">@submitError</p>
}

@code {
    private InterviewFeedbackDTO newFeedback = new InterviewFeedbackDTO();
    private bool isSubmitting = false;
    private string? submitError;

    private async Task HandleSubmit()
    {
        try
        {
            isSubmitting = true;

            var jsonPayload = JsonSerializer.Serialize(newFeedback);
            var content = new StringContent(jsonPayload, Encoding.UTF8, "application/json");

            var response = await HttpClient.PostAsync("http://localhost:5295/api/InterviewFeedback", content);

            response.EnsureSuccessStatusCode(); 

            var responseContent = await response.Content.ReadAsStringAsync();
            
            newFeedback = new InterviewFeedbackDTO();
        }
        catch (Exception ex)
        {
            submitError = $"Error submitting feedback: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }
}

