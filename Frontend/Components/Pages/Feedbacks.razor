@page "/{InterviewId}/feedback"
@rendermode InteractiveServer

@using Common.Dtos.Feedback
@using Frontend.Services
@using Frontend.Services.Contracts
@inject IFeedbackService FeedbackService

<PageTitle>Feedback</PageTitle>

<h3>Feedback</h3>

@code {
    [Parameter]
    public string InterviewId { get; set; }
    private Guid interviewGuid;

    private FeedbackDto feedback;
    private string newFeedbackText;
    private string errorMessage;
    private bool feedbackExists;

    protected override async Task OnInitializedAsync()
    {
        if (!Guid.TryParse(InterviewId, out interviewGuid))
        {
            // InterviewId não é um Guid válido
            throw new ArgumentException("InterviewId não é um Guid válido.");
        }

        await LoadFeedback();
    }

    private async Task LoadFeedback()
    {
        try
        {
            feedback = await FeedbackService.GetFeedbackByInterviewIdAsync(interviewGuid);
            feedbackExists = feedback != null;
            Console.WriteLine($"Feedback Exists: {feedbackExists}");
            if (feedback != null)
            {
                Console.WriteLine($"Feedback Message: {feedback.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading feedback: {ex.Message}");
        }
    }

    private async Task SubmitFeedback()
    {
        if (string.IsNullOrWhiteSpace(newFeedbackText))
        {
            errorMessage = "Please enter your feedback.";
            return;
        }

        var newFeedback = new FeedbackDto
        {
            InterviewId = interviewGuid,
            Message = newFeedbackText
        };

        try
        {
            await FeedbackService.SubmitFeedbackAsync(newFeedback);
            feedback = newFeedback; // Update feedback to reflect the newly submitted feedback
            feedbackExists = true; // Set feedbackExists to true
            newFeedbackText = string.Empty; // Clear the input field
            StateHasChanged(); // Refresh the UI
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error submitting feedback: {ex.Message}");
        }
    }
}

@if (feedbackExists)
{
    <div>
        <h4>Existing Feedback</h4>
        <p>@feedback.Message</p>
    </div>
}
else
{
    <div>
        <p>No feedback found for this interview.</p>
    </div>
}

@if (!feedbackExists)
{
    <div class="mt-4 feedback-form">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p style="color: red;">@errorMessage</p>
        }

        <div class="form-group">
            <textarea class="form-control feedback-textarea" @bind="newFeedbackText" placeholder="Enter your feedback here"></textarea>
        </div>
        <button class="btn btn-primary feedback-button" @onclick="SubmitFeedback">Submit Feedback</button>
    </div>
}
