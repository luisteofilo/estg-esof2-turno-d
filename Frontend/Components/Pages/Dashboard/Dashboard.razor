@page "/dashboard"
@using Common.Dtos.Interview
@using Common.Dtos.Job
@using Common.Dtos.Profile
@using ESOF.WebApp.DBLayer.Entities.Interviews
@using Frontend.Services.Contracts
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

@inject ICandidateService CandidateService
@inject IInterviewService InterviewService
@inject IDashboardService DashboardService
@inject IJobService JobService
@rendermode InteractiveServer

@if (candidates == null) 
{ 
    <h2>Loading...</h2> 
}
else if (!candidates.Any()) 
{ 
    <h2>No Candidates found.</h2>
}
else { 
    <h3 class="dashboard-title" style="margin-top: 30px; margin-bottom: 50px">HR Recruitment Dashboard </h3> 
    <div class="dashboard-container">
        <div class="dashboard-stats" style="margin-bottom: 30px">
            <div class="stat-item">
                <span class="stat-title">Total Candidates</span>
                <h1 class="stat-value">@totalCandidates</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Total Jobs</span>
                <h1 class="stat-value">@totalJobs</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Total Interview's</span>
                <h1 class="stat-value">@totalInterviews</h1>
            </div>
            <div class="stat-item" style="margin-top: 50px">
                <span class="stat-title">Missed Interviews Percentage</span>
                <h1 class="stat-value">@missedInterviewPercentage%</h1>
            </div>
            <div class="stat-item" style="margin-top: 50px">
                <span class="stat-title">Canceled Interviews Percentage</span>
                <h1 class="stat-value">@canceledInterviewPercentage%</h1>
            </div>
        </div>

        <div class="dashboard-graphs" style="margin-bottom: 20px">
            <div class="dashboard-graph">
                <h4 style="text-align: center">Most Common Skills on Candidates</h4>
                <canvas id="commonSkills"></canvas>
            </div>

            <div class="dashboard-graph">
                <h4 style="text-align: center">Most Common Skills on Jobs</h4>
                <canvas id="commonSkillsJobs"></canvas>
            </div>
        </div>
        
        <div class="dashboard-graph">
            <h4>Most Common Experiences</h4>
            <canvas id="applicationSourceChart"></canvas>
        </div>

        <div class="dashboard-graph">
            <h4>Interviews Over Time</h4>
            <canvas id="interviewsOverTime"></canvas>
        </div>
        
        <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">

        <h3 class="mb-3">
            Interview's State's
        </h3>
        <div class="row mb-3">
            <div class="col" style="margin-top: 20px">
                <label for="statusSelector">Select Interview Status:</label>
                <select id="statusSelector" class="form-control" @onchange="OnStatusChanged">
                    <option value="All">All</option>
                    <option value="0">Scheduled</option>
                    <option value="1">Missed</option>
                    <option value="2">On Going</option>
                    <option value="3">Completed</option>
                    <option value="4">Canceled</option>
                </select>
            </div>
            <div class="col" style="margin-top: 20px">
                <label for="searchBox">Search Candidates:</label>
                <input type="text" id="searchBox" class="form-control" placeholder="Search Candidates..." @bind="searchText" @oninput="OnSearchTextChanged">
            </div>
        </div>

        <div class="applicant-table">
            <table>
                <thead>
                    <tr>
                        <th>Candidate</th>
                        <th>Location</th>
                        <th>Interview State</th>
                        <th>Date/Hour Start</th>
                        <th>Date/Hour End</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var candidate in FilteredCandidates)
                { 
                    var interviewsForCandidate = GetInterviewsForCandidate(candidate);
                    foreach (var interview in interviewsForCandidate)
                    {
                        var stateClass = GetInterviewStateClass(interview?.InterviewState);
                        var stateText = GetInterviewStateText(interview?.InterviewState);
                        
                        <tr>
                            <td>@candidate.Name</td>
                            <td>@(interview?.Location ?? "Unknown")</td>
                            <td>
                                <span class="status @(stateClass)">
                                    @(stateText)
                                </span>
                            </td>
                            <td>@interview.DateHourStart</td>
                            <td>@interview.DateHourEnd</td>
                        </tr>
                    }
                }
                </tbody>
            </table>
        </div>
    </div> 
}

@code {
    private IJSObjectReference? module;
    private IEnumerable<CandidateDto>? candidates;
    private IEnumerable<InterviewDto>? interviews;
    private IEnumerable<JobDto>? jobs;
    private IEnumerable<ExperienceDto>? experiences;
    private IEnumerable<string>? skillNames;
    private IEnumerable<string>? jobSkillNames;
    private int totalCandidates;
    private int totalJobs;
    private int totalInterviews;
    private double missedInterviewPercentage;
    private double canceledInterviewPercentage;
    private string selectedStatus = "All";
    private string searchText = "";
    private bool chartsInitialized = false;
    
    private Dictionary<int, int> monthlyInterviewCounts = new Dictionary<int, int>();

    private List<CandidateDto> FilteredCandidates => GetFilteredCandidates();

    private void OnStatusChanged(ChangeEventArgs e)
    {
        selectedStatus = e.Value.ToString();
    }

    private string GetInterviewStateText(InterviewState? state)
    {
        if (state.HasValue)
        {
            Console.WriteLine($"Interview State (text): {state.Value}");
        }
        return state switch
        {
            InterviewState.Scheduled => "Scheduled",
            InterviewState.Missed => "Missed",
            InterviewState.OnGoing => "On Going",
            InterviewState.Completed => "Completed",
            InterviewState.Canceled => "Canceled",
            _ => "No Interview"
        };
    }

    private string GetInterviewStateClass(InterviewState? state)
    {
        if (state.HasValue)
        {
            Console.WriteLine($"Interview State (class): {state.Value}");
        }
        return state switch
        {
            InterviewState.Scheduled => "scheduled",
            InterviewState.Missed => "missed",
            InterviewState.OnGoing => "on-going",
            InterviewState.Completed => "completed",
            InterviewState.Canceled => "canceled",
            _ => "no-interview"
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!chartsInitialized)
        {
            try 
            {
                module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Dashboard/Dashboard.razor.js"); 
                Console.WriteLine("JS module loaded"); 
                
                if (module != null && skillNames != null && jobSkillNames != null) 
                {
                    await InitializeCharts();
                    chartsInitialized = true;
                } 
            }
            catch (Exception ex) 
            {
                Console.WriteLine($"Error initializing charts: {ex.Message}"); 
            } 
        }
    }

    private async Task InitializeCharts()
    {
        if (module != null && skillNames != null && jobSkillNames != null && experiences != null)
        {
            await module.InvokeVoidAsync("Dashboard.initPieChart", "#commonSkills", skillNames);
            await module.InvokeVoidAsync("Dashboard.initPieChart", "#commonSkillsJobs", jobSkillNames);
            await module.InvokeVoidAsync("Dashboard.initDoughnutChart", "#applicationSourceChart", experiences.Select(e => e.Name).ToList());
            await module.InvokeVoidAsync("Dashboard.initLineChart", "#interviewsOverTime", GetMonthlyInterviewData());
        }
    }
    
    private object GetMonthlyInterviewData()
    {
        for (int month = 1; month <= 12; month++)
        {
            monthlyInterviewCounts[month] = 0;
        }

        foreach (var interview in interviews)
        {
            var month = interview.DateHourStart.Month;
            monthlyInterviewCounts[month]++;
        }

        return new
        {
            labels = monthlyInterviewCounts.Keys.OrderBy(m => m).Select(m => new DateTime(1, m, 1).ToString("MMM")).ToArray(),
            counts = monthlyInterviewCounts.Values.ToArray()
        };
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("OnInitializedAsync started");

            candidates = await CandidateService.GetCandidatesAsync();
            interviews = await InterviewService.GetInterviewsAsync();
            jobs = await JobService.GetJobsAsync();
            experiences = await DashboardService.GetExperiences();
            
            var profileSkills = await DashboardService.GetProfileSkills();
            skillNames = profileSkills.Select(ps => ps.SkillName).ToList();
            
            var jobSkills = await DashboardService.GetJobSkills();
            jobSkillNames = jobSkills.Select(js => js.SkillName).ToList();
            
            totalCandidates = candidates.Count();
            totalJobs = jobs.Count();
            totalInterviews = interviews.Count();
            
            int missedInterviews = interviews.Count(i => i.InterviewState == InterviewState.Missed);
            missedInterviewPercentage = totalInterviews > 0 ? (double)missedInterviews / totalInterviews * 100 : 0;
            
            int canceledInterviews = interviews.Count(i => i.InterviewState == InterviewState.Canceled);
            canceledInterviewPercentage = totalInterviews > 0 ? (double)canceledInterviews / totalInterviews * 100 : 0;
            
            foreach (var interview in interviews)
            {
                Console.WriteLine($"Interview ID: {interview.InterviewId}, State: {GetInterviewStateText(interview.InterviewState)}");
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading candidates: {ex.Message}");
        }
    }
﻿@page "/Dashboard"
<h3>Dashboard Page</h3>

@if (Profile == null)
{
<h2>Loading...</h2>
}
else
{

    @* Link to the CSS file *@
    <link href="Dashboard/dashboard.css" rel="stylesheet"/>

    <h3 class="dashboard-title">HR Recruitment Dashboard to Monitor Job Interview Status</h3>

    <div class="dashboard-container">
        <div class="dashboard-stats">
            <div class="stat-item">
                <span class="stat-title">Total Applicants</span>
                <h1 class="stat-value">122</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Shortlisted Candidates</span>
                <h1 class="stat-value">77</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Hired Candidates</span>
                <h1 class="stat-value">16</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Rejected Candidates</span>
                <h1 class="stat-value">13</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Time to Hire (Days)</span>
                <h1 class="stat-value">16</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Cost to Hire</span>
                <h1 class="stat-value">$175</h1>
            </div>
        </div>

        <div class="dashboard-graph">
            <h4>Open Position by Department</h4>
            <canvas id="openPositionChart"></canvas>
        </div>

        <div class="dashboard-graph">
            <h4>Application Received by Source</h4>
            <canvas id="applicationSourceChart"></canvas>
        </div>

        <div class="dashboard-stats">
            <div class="stat-item">
                <span class="stat-title">Offer Acceptance Ratio</span>
                <h1 class="stat-value">79%</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Offers Accepted</span>
                <h1 class="stat-value">19</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Offers Provided</span>
                <h1 class="stat-value">24</h1>
            </div>
        </div>
        <div class="weekly-summary">
            <h4>Application Received by Department</h4>
            <table>
                <thead>
                <tr>
                    <th>Department</th>
                    <th>Applications</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td>Accounts</td>
                    <td>24</td>
                </tr>
                <tr>
                    <td>Analytics</td>
                    <td>10</td>
                </tr>
                <tr>
                    <td>HR</td>
                    <td>17</td>
                </tr>
                <tr>
                    <td>IT</td>
                    <td>22</td>
                </tr>
                <tr>
                    <td>Marketing</td>
                    <td>18</td>
                </tr>
                <tr>
                    <td>Operations</td>
                    <td>16</td>
                </tr>
                </tbody>
            </table>
        </div>


        <div class="applicant-table">
            <h4>Applicants</h4>
            <table>
                <thead>
                <tr>
                    <th>Candidate</th>
                    <th>Customer</th>
                    <th>Status</th>
                    <th>Time</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td>@Profile.FirstName @Profile.LastName</td>
                    <td>Empresa</td>
                    <td><span class="status approved">Approved</span></td>
                    <td>Just now</td>
                </tr>   
                <tr>
                    <td>Ashley Garrett</td>
                    <td>Empresa</td>
                    <td><span class="status approved">Approved</span></td>
                    <td>Just now</td>
                </tr>
                <tr>
                    <td>Woodrow Burton</td>
                    <td>Empresa</td>
                    <td><span class="status pending">Pending</span></td>
                    <td>Just now</td>
                </tr>
                <tr>
                    <td>Eric McGee</td>
                    <td>Empresa</td>
                    <td><span class="status pending">Pending</span></td>
                    <td>Nov 09, 3:23 AM</td>
                </tr>

                <tr>
                    <td>Barbara Lucas</td>
                    <td>Empresa</td>
                    <td><span class="status rejected">Refused</span></td>
                    <td>Nov 08, 8:53 AM</td>
                </tr>
                </tbody>
            </table>
        </div>
    </div>
}

<script src="Dashboard/dashboard.js"></script>

@code {
protected override async Task OnAfterRenderAsync(bool firstRender)
{
if (firstRender)
{
await JSRuntime.InvokeVoidAsync("initCharts");
}
}
}
