@page "/dashboard"
@using Common.Dtos.Interview
@using Common.Dtos.Job
@using Common.Dtos.Profile
@using ESOF.WebApp.DBLayer.Entities.Interviews
@using Frontend.Services.Contracts
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

@inject ICandidateService CandidateService
@inject IInterviewService InterviewService
@inject IDashboardService DashboardService
@inject IJobService JobService
@rendermode InteractiveServer

@if (candidates == null) 
{ 
    <h2>Loading...</h2> 
}
else if (!candidates.Any()) 
{ 
    <h2>No Candidates found.</h2>
}
else { 
    <h3 class="dashboard-title" style="margin-top: 30px; margin-bottom: 50px">HR Recruitment Dashboard </h3> 
    <div class="dashboard-container">
        <div class="dashboard-stats" style="margin-bottom: 30px">
            <div class="stat-item">
                <span class="stat-title">Total Candidates</span>
                <h1 class="stat-value">@totalCandidates</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Total Jobs</span>
                <h1 class="stat-value">@totalJobs</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Total Interview's</span>
                <h1 class="stat-value">@totalInterviews</h1>
            </div>
            <div class="stat-item" style="margin-top: 50px">
                <span class="stat-title">Missed Interviews Percentage</span>
                <h1 class="stat-value">@missedInterviewPercentage%</h1>
            </div>
            <div class="stat-item" style="margin-top: 50px">
                <span class="stat-title">Canceled Interviews Percentage</span>
                <h1 class="stat-value">@canceledInterviewPercentage%</h1>
            </div>
        </div>

        <div class="dashboard-graphs" style="margin-bottom: 20px">
            <div class="dashboard-graph">
                <h4 style="text-align: center">Most Common Skills on Candidates</h4>
                <canvas id="commonSkills"></canvas>
            </div>

            <div class="dashboard-graph">
                <h4 style="text-align: center">Most Common Skills on Jobs</h4>
                <canvas id="commonSkillsJobs"></canvas>
            </div>
        </div>
        
        <div class="dashboard-graph">
            <h4>Most Common Experiences</h4>
            <canvas id="applicationSourceChart"></canvas>
        </div>
        
        <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">

        <h3 class="mb-3">
            Interview's State's
        </h3>
        <div class="row mb-3">
            <div class="col" style="margin-top: 20px">
                <label for="statusSelector">Select Interview Status:</label>
                <select id="statusSelector" class="form-control" @onchange="OnStatusChanged">
                    <option value="All">All</option>
                    <option value="0">Scheduled</option>
                    <option value="1">Missed</option>
                    <option value="2">On Going</option>
                    <option value="3">Completed</option>
                    <option value="4">Canceled</option>
                </select>
            </div>
            <div class="col" style="margin-top: 20px">
                <label for="searchBox">Search Candidates:</label>
                <input type="text" id="searchBox" class="form-control" placeholder="Search Candidates..." @bind="searchText" @oninput="OnSearchTextChanged">
            </div>
        </div>

        <div class="applicant-table">
            
            <table>
                <thead>
                <tr>
                    <th>Candidate</th>
                    <th>Location</th>
                    <th>Interview State</th>
                    <th>Date/Hour Start</th>
                    <th>Date/Hour End</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var candidate in FilteredCandidates)
                { 
                    var interviewsForCandidate = interviews.Where(i => i.CandidateId == candidate.CandidateId && 
                                                                        (selectedStatus == "All" || (int?)i.InterviewState == int.Parse(selectedStatus))).ToList();
                    foreach (var interview in interviewsForCandidate)
                    {
                        var stateClass = GetInterviewStateClass((int?)interview?.InterviewState);
                        var stateText = GetInterviewStateText((int?)interview?.InterviewState);
                        
                        <tr>
                            <td>@candidate.Name</td>
                            <td>@(interview?.Location ?? "Unknown")</td>
                            <td>
                                <span class="status @(stateClass)">
                                    @(stateText)
                                </span>
                            </td>
                            <td>@interview.DateHourStart</td>
                            <td>@interview.DateHourEnd</td>
                        </tr>
                    }
                }
                </tbody>
            </table>
        </div>
    </div> 
}

@code {
    private IJSObjectReference? module;
    private IEnumerable<CandidateDto>? candidates;
    private IEnumerable<InterviewDto>? interviews;
    private IEnumerable<JobDto>? jobs;
    private IEnumerable<ExperienceDto>? experiences;
    private IEnumerable<string>? skillNames;
    private IEnumerable<string>? jobSkillNames;
    private int totalCandidates;
    private int totalJobs;
    private int totalInterviews;
    private double missedInterviewPercentage;
    private double canceledInterviewPercentage;
    private string selectedStatus = "All";
    private string searchText = "";
    private List<CandidateDto> FilteredCandidates => GetFilteredCandidates();
    private bool chartsInitialized = false;

    private void OnStatusChanged(ChangeEventArgs e)
    {
        selectedStatus = e.Value.ToString();
    }

    private string GetInterviewStateText(int? state)
    {
        if (state.HasValue)
        {
            Console.WriteLine($"Interview State (text): {state.Value}");
        }
        return state switch
        {
            0 => "Scheduled",
            1 => "Missed",
            2 => "On Going",
            3 => "Completed",
            4 => "Canceled",
            _ => "No Interview"
        };
    }

    private string GetInterviewStateClass(int? state)
    {
        if (state.HasValue)
        {
            Console.WriteLine($"Interview State (class): {state.Value}");
        }
        return state switch
        {
            0 => "scheduled",
            1 => "missed",
            2 => "on-going",
            3 => "completed",
            4 => "canceled",
            _ => "no-interview"
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!chartsInitialized)
        {
            try 
            {
                module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Dashboard/Dashboard.razor.js"); 
                Console.WriteLine("JS module loaded"); 
                
                if (module != null && skillNames != null && jobSkillNames != null) 
                {
                    await InitializeCharts();
                    chartsInitialized = true;
                } 
            }
            catch (Exception ex) 
            {
                Console.WriteLine($"Error initializing charts: {ex.Message}"); 
            } 
        }
    }

    private async Task InitializeCharts()
    {
        if (module != null && skillNames != null && jobSkillNames != null && experiences != null)
        {
            await module.InvokeVoidAsync("Dashboard.initPieChart", "#commonSkills", skillNames);
            await module.InvokeVoidAsync("Dashboard.initPieChart", "#commonSkillsJobs", jobSkillNames);
            await module.InvokeVoidAsync("Dashboard.initDoughnutChart", "#applicationSourceChart", experiences.Select(e => e.Name).ToList());
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("OnInitializedAsync started");

            candidates = await CandidateService.GetCandidatesAsync();
            interviews = await InterviewService.GetInterviewsAsync();
            jobs = await JobService.GetJobsAsync();
            experiences = await DashboardService.GetExperiences();
            
            var profileSkills = await DashboardService.GetProfileSkills();
            skillNames = profileSkills.Select(ps => ps.SkillName).ToList();
            
            var jobSkills = await DashboardService.GetJobSkills();
            jobSkillNames = jobSkills.Select(js => js.SkillName).ToList();
            
            totalCandidates = candidates.Count();
            totalJobs = jobs.Count();
            totalInterviews = interviews.Count();
            
            int missedInterviews = interviews.Count(i => i.InterviewState == (InterviewState)1);
            missedInterviewPercentage = totalInterviews > 0 ? (double)missedInterviews / totalInterviews * 100 : 0;
            
            int canceledInterviews = interviews.Count(i => i.InterviewState == (InterviewState)4);
            canceledInterviewPercentage = totalInterviews > 0 ? (double)canceledInterviews / totalInterviews * 100 : 0;
            
            
            foreach (var interview in interviews)
            {
                Console.WriteLine($"Interview ID: {interview.InterviewId}, State: {GetInterviewStateText((int?)interview.InterviewState)}");
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading candidates: {ex.Message}");
        }
    }
    
    private void OnSearchTextChanged(ChangeEventArgs e)
    {
        searchText = e.Value.ToString();
    }
    
    private List<CandidateDto> GetFilteredCandidates()
    {
        IEnumerable<CandidateDto> result = candidates;

       
        if (int.TryParse(selectedStatus, out int status) && selectedStatus != "All")
        {
            result = result.Where(c => interviews.Any(i => i.CandidateId == c.CandidateId && (int)i.InterviewState == status));
        }

        
        if (!string.IsNullOrEmpty(searchText))
        {
            result = result.Where(c => c.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase));
        }

        return result.ToList();
    }
}
