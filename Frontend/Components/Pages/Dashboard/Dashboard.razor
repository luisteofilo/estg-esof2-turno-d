@page "/dashboard"
@using Common.Dtos.Interview
@using Common.Dtos.Profile 
@using ESOF.WebApp.DBLayer.Entities.Interviews
@using Frontend.Services.Contracts
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

@inject IProfileService ProfileService
@inject ICandidateService CandidateService
@inject IInterviewService InterviewService
@inject IDashboardService DashboardService
@rendermode InteractiveServer

@if (profiles == null) 
{ 
    <h2>Loading...</h2> 
}
else if (!profiles.Any()) 
{ 
    <h2>No profiles found.</h2>
}
else { 
    <h3 class="dashboard-title">HR Recruitment Dashboard </h3> 
    <div class="dashboard-container">
        <div class="dashboard-stats">
            <div class="stat-item">
                <span class="stat-title">Total Candidates</span>
                <h1 class="stat-value">@totalCandidates</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Total jobs</span>
                <h1 class="stat-value">None</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Total Jobs open</span>
                <h1 class="stat-value">None</h1>
            </div>
            
        </div>

        <div class="dashboard-graph">
            <h4>Most Common Skills</h4>
            <canvas id="commonSkills"></canvas>
            
            <h4>Most Common Skills on Jobs</h4>
        </div>
        
        <div class="dashboard-graph">
            <h4>Application Received by Source</h4>
            <canvas id="applicationSourceChart"></canvas>
        </div>

        <div class="dashboard-stats">
            <div class="stat-item">
                <span class="stat-title">Offer Acceptance Ratio</span>
                <h1 class="stat-value">79%</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Offers Accepted</span>
                <h1 class="stat-value">19</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Offers Provided</span>
                <h1 class="stat-value">24</h1>
            </div>
        </div>

        <div>
            <label for="statusSelector">Select Status:</label>
            <select id="statusSelector" @onchange="OnStatusChanged">
                <option value="All">All</option>
                <option value="0">Scheduled</option>
                <option value="1">Missed</option>
                <option value="2">On Going</option>
                <option value="3">Completed</option>
                <option value="4">Canceled</option>
            </select>
        </div>

        <div class="applicant-table">
            <h4>Applicants</h4>
            <table>
                <thead>
                <tr>
                    <th>Candidate</th>
                    <th>Location</th>
                    <th>Interview State</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var candidate in FilteredCandidates.Take(10))
                { 
                    var interview = interviews.FirstOrDefault(i => i.CandidateId == candidate.CandidateId); 
                    var stateClass = GetInterviewStateClass((int?)interview?.InterviewState);
                    var stateText = GetInterviewStateText((int?)interview?.InterviewState);
                    
                    <tr>
                        <td>@candidate.Name</td>
                        <td>@(interview?.Location ?? "Unknown")</td>
                        <td>
                            <span class="status @(stateClass)">
                                @(stateText)
                            </span>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div> 
}

@code {
    
    private IJSObjectReference? module;
    private IEnumerable<ProfileDto>? profiles;
    private IEnumerable<CandidateDto>? candidates;
    private IEnumerable<InterviewDto>? interviews;
    private IEnumerable<string>? skillNames;
    private int totalCandidates;
    private string selectedStatus = "All";
    private List<CandidateDto> FilteredCandidates => GetFilteredCandidates();

    private void OnStatusChanged(ChangeEventArgs e)
    {
        selectedStatus = e.Value.ToString();
        StateHasChanged(); // Trigger a re-render
    }

    private List<CandidateDto> GetFilteredCandidates()
    {
        if (selectedStatus == "All")
        {
            return candidates.ToList();
        }

        if (int.TryParse(selectedStatus, out int status))
        {
            var filteredInterviews = interviews.Where(i => (int)i.InterviewState == status).ToList();
            var candidateIds = filteredInterviews.Select(i => i.CandidateId).ToHashSet();
            return candidates.Where(c => candidateIds.Contains(c.CandidateId)).ToList();
        }

        return candidates.ToList();
    }

    private string GetInterviewStateText(int? state)
    {
        if (state.HasValue)
        {
            Console.WriteLine($"Interview State (text): {state.Value}");
        }
        return state switch
        {
            0 => "Scheduled",
            1 => "Missed",
            2 => "On Going",
            3 => "Completed",
            4 => "Canceled",
            _ => "No Interview"
        };
    }

    private string GetInterviewStateClass(int? state)
    {
        if (state.HasValue)
        {
            Console.WriteLine($"Interview State (class): {state.Value}");
        }
        return state switch
        {
            0 => "scheduled",
            1 => "missed",
            2 => "on-going",
            3 => "completed",
            4 => "canceled",
            _ => "no-interview"
        };
    }

    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try 
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Dashboard/Dashboard.razor.js"); 
            Console.WriteLine("JS module loaded");
            if (module != null && skillNames != null) 
            {
                await InitializeCharts();
            } 
        }
        catch (Exception ex) 
        {
            Console.WriteLine($"Error initializing charts: {ex.Message}"); 
        }
    }

    private async Task InitializeCharts()
    {
        if (module != null && skillNames != null)
        {
            await module.InvokeVoidAsync("Dashboard.initCharts", "#commonSkills", skillNames);
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("OnInitializedAsync started");

            profiles = await ProfileService.GetProfiles();
            candidates = await CandidateService.GetCandidatesAsync();
            interviews = await InterviewService.GetInterviewsAsync();
            
            var profileSkills = await DashboardService.GetProfileSkills();
            skillNames = profileSkills.Select(ps => ps.SkillName).ToList();

            totalCandidates = candidates.Count();

            Console.WriteLine($"Interviews loaded: {interviews.Count()}");

            // Print the state of each interview
            foreach (var interview in interviews)
            {
                Console.WriteLine($"Interview ID: {interview.InterviewId}, State: {GetInterviewStateText((int?)interview.InterviewState)}");
            }
            Console.WriteLine($"Candidates loaded: {totalCandidates}");
            Console.WriteLine($"Skill names loaded: {string.Join(", ", skillNames)}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading profiles: {ex.Message}");
        }
    }
﻿@page "/Dashboard"
<h3>Dashboard Page</h3>

@if (Profile == null)
{
<h2>Loading...</h2>
}
else
{

    @* Link to the CSS file *@
    <link href="Dashboard/dashboard.css" rel="stylesheet"/>

    <h3 class="dashboard-title">HR Recruitment Dashboard to Monitor Job Interview Status</h3>

    <div class="dashboard-container">
        <div class="dashboard-stats">
            <div class="stat-item">
                <span class="stat-title">Total Applicants</span>
                <h1 class="stat-value">122</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Shortlisted Candidates</span>
                <h1 class="stat-value">77</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Hired Candidates</span>
                <h1 class="stat-value">16</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Rejected Candidates</span>
                <h1 class="stat-value">13</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Time to Hire (Days)</span>
                <h1 class="stat-value">16</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Cost to Hire</span>
                <h1 class="stat-value">$175</h1>
            </div>
        </div>

        <div class="dashboard-graph">
            <h4>Open Position by Department</h4>
            <canvas id="openPositionChart"></canvas>
        </div>

        <div class="dashboard-graph">
            <h4>Application Received by Source</h4>
            <canvas id="applicationSourceChart"></canvas>
        </div>

        <div class="dashboard-stats">
            <div class="stat-item">
                <span class="stat-title">Offer Acceptance Ratio</span>
                <h1 class="stat-value">79%</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Offers Accepted</span>
                <h1 class="stat-value">19</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Offers Provided</span>
                <h1 class="stat-value">24</h1>
            </div>
        </div>
        <div class="weekly-summary">
            <h4>Application Received by Department</h4>
            <table>
                <thead>
                <tr>
                    <th>Department</th>
                    <th>Applications</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td>Accounts</td>
                    <td>24</td>
                </tr>
                <tr>
                    <td>Analytics</td>
                    <td>10</td>
                </tr>
                <tr>
                    <td>HR</td>
                    <td>17</td>
                </tr>
                <tr>
                    <td>IT</td>
                    <td>22</td>
                </tr>
                <tr>
                    <td>Marketing</td>
                    <td>18</td>
                </tr>
                <tr>
                    <td>Operations</td>
                    <td>16</td>
                </tr>
                </tbody>
            </table>
        </div>


        <div class="applicant-table">
            <h4>Applicants</h4>
            <table>
                <thead>
                <tr>
                    <th>Candidate</th>
                    <th>Customer</th>
                    <th>Status</th>
                    <th>Time</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td>@Profile.FirstName @Profile.LastName</td>
                    <td>Empresa</td>
                    <td><span class="status approved">Approved</span></td>
                    <td>Just now</td>
                </tr>   
                <tr>
                    <td>Ashley Garrett</td>
                    <td>Empresa</td>
                    <td><span class="status approved">Approved</span></td>
                    <td>Just now</td>
                </tr>
                <tr>
                    <td>Woodrow Burton</td>
                    <td>Empresa</td>
                    <td><span class="status pending">Pending</span></td>
                    <td>Just now</td>
                </tr>
                <tr>
                    <td>Eric McGee</td>
                    <td>Empresa</td>
                    <td><span class="status pending">Pending</span></td>
                    <td>Nov 09, 3:23 AM</td>
                </tr>

                <tr>
                    <td>Barbara Lucas</td>
                    <td>Empresa</td>
                    <td><span class="status rejected">Refused</span></td>
                    <td>Nov 08, 8:53 AM</td>
                </tr>
                </tbody>
            </table>
        </div>
    </div>
}

<script src="Dashboard/dashboard.js"></script>

@code {
protected override async Task OnAfterRenderAsync(bool firstRender)
{
if (firstRender)
{
await JSRuntime.InvokeVoidAsync("initCharts");
}
}
}
