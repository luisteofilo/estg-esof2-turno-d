@page "/dashboard"
@using Common.Dtos.Profile 
@using Frontend.Services.Contracts
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

@inject IProfileService ProfileService
@inject IDashboardService DashboardService
@rendermode InteractiveServer

@if (profiles == null) 
{ 
    <h2>Loading...</h2> 
}
else if (!profiles.Any()) 
{ 
    <h2>No profiles found.</h2>
}
else { 
    <h3 class="dashboard-title">HR Recruitment Dashboard to Monitor Job Interview Status</h3> 
    <div class="dashboard-container">
        <div class="dashboard-stats">
            <div class="stat-item">
                <span class="stat-title">Total Profiles</span>
                <h1 class="stat-value">@totalProfiles</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Shortlisted Candidates</span>
                <h1 class="stat-value">None</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Hired Candidates</span>
                <h1 class="stat-value">None</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Rejected Candidates</span>
                <h1 class="stat-value">None</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Time to Hire (Days)</span>
                <h1 class="stat-value">None</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Cost to Hire</span>
                <h1 class="stat-value">None</h1>
            </div>
        </div>

        <div class="dashboard-graph">
            <h4>Most Common Skills</h4>
            <canvas id="commonSkills"></canvas>
        </div>
        
        <div class="dashboard-graph">
            <h4>Most common <job></job> position</h4>
            <canvas id="openPositionChart"></canvas>
        </div>
        
        <div class="dashboard-graph">
            <h4>Application Received by Source</h4>
            <canvas id="applicationSourceChart"></canvas>
        </div>

        <div class="dashboard-graph">
            <h4>Recruitment Funnel</h4>
            <canvas id="recruitmentFunnelChart"></canvas>
        </div>

        <div class="dashboard-stats">
            <div class="stat-item">
                <span class="stat-title">Offer Acceptance Ratio</span>
                <h1 class="stat-value">79%</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Offers Accepted</span>
                <h1 class="stat-value">19</h1>
            </div>
            <div class="stat-item">
                <span class="stat-title">Offers Provided</span>
                <h1 class="stat-value">24</h1>
            </div>
        </div>
        
        <div class="weekly-summary">
            <h4>Application Received by Department</h4>
            <table>
                <thead>
                <tr>
                    <th>Department</th>
                    <th>Applications</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td>Accounts</td>
                    <td>24</td>
                </tr>
                <tr>
                    <td>Analytics</td>
                    <td>10</td>
                </tr>
                <tr>
                    <td>HR</td>
                    <td>17</td>
                </tr>
                <tr>
                    <td>IT</td>
                    <td>22</td>
                </tr>
                <tr>
                    <td>Marketing</td>
                    <td>18</td>
                </tr>
                <tr>
                    <td>Operations</td>
                    <td>16</td>
                </tr>
                </tbody>
            </table>
        </div>
        
        <div class="applicant-table">
            <h4>Applicants</h4>
            <table>
                <thead>
                <tr>
                    <th>Candidate</th>
                    <th>Location</th>
                    <th>See profile</th>
                </tr>
                </thead>
                <tbody>
                <!--Mostra até 10 perfis-->
                @foreach (var profile in profiles.Take(10))
                {
                    <tr>
                        <td>@profile.FirstName @profile.LastName</td>
                        <td>@profile.Location</td>
                        <td><a href="@profile.UrlProfile">More</a></td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div> 
}

@code {
    private IJSObjectReference? module;
    private IEnumerable<ProfileDto>? profiles;
    private IEnumerable<string>? skillNames;
    private int totalProfiles;

    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        
            try
            {
                module = await JSRuntime.InvokeAsync<IJSObjectReference>(
                    "import", "./Components/Pages/Dashboard/Dashboard.razor.js");
                Console.WriteLine("JS module loaded");

                
                if (module != null && skillNames != null)
                {
                    await InitializeCharts();
                }

            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing charts: {ex.Message}");
            }
        
    }
    private async Task InitializeCharts()
    {
        if (module != null && skillNames != null)
        {
            await module.InvokeVoidAsync("Dashboard.initCharts", "#commonSkills", skillNames);
        }
    }
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("OnInitializedAsync started");

            profiles = await ProfileService.GetProfiles();

            
            var profileSkills = await DashboardService.GetProfileSkills();
            skillNames = profileSkills.Select(ps => ps.SkillName).ToList();  

            totalProfiles = profiles.Count();

            Console.WriteLine($"Profiles loaded: {totalProfiles}");
            Console.WriteLine($"Skill names loaded: {string.Join(", ", skillNames)}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading profiles: {ex.Message}");
        }
    }

    
}