@page "/roles"
@layout MainLayout
@using ESOF.WebApp.DBLayer.Entities
@using Frontend.Components.Layout
@using Frontend.Services.Contracts
@inject IRoleService RoleService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Roles</PageTitle>

<AuthorizeView Roles="Admin">
    <Authorized Context="_">
        <h3>Manage Roles</h3>

        <EditForm Model="_newRole" OnValidSubmit="HandleCreateRole" FormName="_newRole" OnInvalidSubmit="HandleInvalidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="roleName">Role Name:</label>
                <InputText id="roleName" class="form-control" @bind-Value="_newRole.Name" />
            </div>
            <button type="submit" class="btn btn-primary">Create Role</button>
        </EditForm>

        @if (_roles == null)
        {
            <p>Loading roles...</p>
        }
        else
        {
            <table class="table table-bordered table-striped mt-4">
                <thead class="thead-dark">
                    <tr>
                        <th>Role Name</th>
                        <th>Permissions</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var role in _roles)
                    {
                        <tr>
                            <td>
                                @if (role.IsEditingName)
                                {
                                    <InputText class="form-control" @bind-Value="role.UpdatedName" />
                                    <button class="btn btn-primary mt-1" @onclick="() => UpdateRoleName(role)">Save</button>
                                    <button class="btn btn-secondary mt-1 ml-1" @onclick="() => CancelEditRoleName(role)">Cancel</button>
                                }
                                else
                                {
                                    <span>@role.Name</span>
                                }
                            </td>
                            <td>
                                @if (role.Permissions == null)
                                {
                                    <p>Loading permissions...</p>
                                }
                                else if (role.Permissions.Count == 0)
                                {
                                    <p>No permissions assigned</p>
                                }
                                else
                                {
                                    <ul>
                                        @foreach (var permission in role.Permissions)
                                        {
                                            <li>@permission.Name</li>
                                        }
                                    </ul>
                                }
                            </td>
                            <td>
                                <button class="btn btn-warning" @onclick="() => StartEditRoleName(role)">Edit</button>
                                <button @onclick="() => ShowConfirmationModal(role.RoleId)" class="btn btn-danger">Delete</button>
                                <button class="btn btn-info" @onclick="() => NavigateToManagePermissions(role.RoleId)">Manage Perms</button>
                                <button class="btn btn-primary" @onclick="() => NavigateToUsersWithRole(role.RoleId)">Users with role</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-body flex-column">
                        <div class="text-center mt-2">
                            <span class="text-danger fw-bolder">You don't have permission to access this page.</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

<!-- Modal de Confirmação -->
<div class="modal" tabindex="-1" role="dialog" style="display: @_displayConfirmationModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete Role</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseConfirmationModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this role?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseConfirmationModal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteConfirmed">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    private RoleWithPermissionsModel _newRole = new();
    private List<RoleWithPermissionsModel>? _roles;
    private string _displayConfirmationModal = "none";
    private Guid _roleIdToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadRolesWithPermissions();
    }

    private async Task LoadRolesWithPermissions()
    {
        try
        {
            var roles = await RoleService.GetRolesAsync();
            _roles = new List<RoleWithPermissionsModel>();

            foreach (var role in roles)
            {
                var permissions = await RoleService.GetRolePermissionsAsync(role.RoleId);

                if (permissions != null)
                {
                    var roleModel = new RoleWithPermissionsModel
                    {
                        RoleId = role.RoleId,
                        Name = role.Name,
                        Permissions = permissions,
                        UpdatedName = role.Name 
                    };

                    _roles.Add(roleModel);
                }
                else
                {
                    Console.WriteLine($"Permissions not found for role {role.RoleId}");
                }
            }

            Console.WriteLine("Roles with permissions fetched successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching roles with permissions: {ex.Message}");
        }
    }

    private static Task HandleInvalidSubmit()
    {
        Console.WriteLine("Invalid form submission.");
        return Task.CompletedTask;
    }

    private async Task HandleCreateRole()
    {
        try
        {
            StateHasChanged();
            Console.WriteLine($"Role Name before creating: {_newRole.Name}");
            var role = new Role
            {
                RoleId = Guid.NewGuid(),
                Name = _newRole.Name
            };

            Console.WriteLine("Creating role...");
            Console.WriteLine($"Role Name: {role.Name}");
            Console.WriteLine($"Role ID: {role.RoleId}");

            await RoleService.CreateRoleAsync(role);
            _newRole = new RoleWithPermissionsModel();
            await LoadRolesWithPermissions();
            Console.WriteLine("Role created successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating role: {ex.Message}");
        }
    }

    private async Task DeleteRole(Guid roleId)
    {
        try
        {
            Console.WriteLine($"Attempting to delete role with ID: {roleId}");
            await RoleService.DeleteRoleAsync(roleId);
            await LoadRolesWithPermissions();
            Console.WriteLine("Role deleted successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting role: {ex.Message}");
        }
    }

    private void StartEditRoleName(RoleWithPermissionsModel role)
    {
        role.IsEditingName = true;
    }

    private async Task UpdateRoleName(RoleWithPermissionsModel role)
    {
        try
        {
            var roleUpd = new Role
            {
                RoleId = role.RoleId,
                Name = role.UpdatedName
            };
            
            Console.WriteLine($"Updating role name for role ID: {role.RoleId} to {role.UpdatedName}");

            await RoleService.UpdateRoleAsync(role.RoleId, roleUpd);
            role.IsEditingName = false;
            await LoadRolesWithPermissions();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating role name: {ex.Message}");
        }
    }

    private void NavigateToManagePermissions(Guid roleId)
    {
        NavigationManager.NavigateTo($"/manage-permissions/{roleId}");
    }
    
    private void CancelEditRoleName(RoleWithPermissionsModel role)
    {
        role.UpdatedName = role.Name;
        role.IsEditingName = false;
    }

    private void ShowConfirmationModal(Guid roleId)
    {
        _roleIdToDelete = roleId;
        _displayConfirmationModal = "block";
    }

    private void CloseConfirmationModal()
    {
        _displayConfirmationModal = "none";
    }

    private async Task DeleteConfirmed()
    {
        await DeleteRole(_roleIdToDelete);
        CloseConfirmationModal();
    }
    
    private void NavigateToUsersWithRole(Guid roleId)
    {
        NavigationManager.NavigateTo($"/roles/{roleId}/users");
    }

    public class RoleWithPermissionsModel
    {
        public Guid RoleId { get; set; }
        public string Name { get; set; }
        public string UpdatedName { get; set; } 
        public List<Permission>? Permissions { get; set; }
        public bool IsEditingName { get; set; } 
    }
}
