@page "/faqs/{jobId?}"
@using Frontend.Helpers
@using Frontend.Services
@using Common.Dtos.FAQ
@using Frontend.Services.Contracts
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject IFAQService FaqService

<PageTitle>Jobs FAQ</PageTitle>

<div class="d-flex justify-content-between">
<h1>Job Name FAQ</h1>
    
</div>
<hr/>

<div>
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <h3 class="mt-2">New Question</h3>
            <textarea
                @onchange="e => QuestionInput = e.Value.ToString()" 
class="form-control mb-3" placeholder="Your Question"></textarea>
            <button class="btn btn-primary" @onclick="SubmitQuestion">Submit</button>
        </div>
    </div>
    
    <div class="card shadow-sm">
        <div class="card-header">
            <h3>Previously Asked Questions (@_questionCount)</h3>
        </div>
        <div class="card-body">
            <div>
            @if (_questions != null && _questions.Any())
            {
                foreach (var question in _questions)
                {
                    <QuestionPreview Question="@question" jobId="@JobId" />
                }
            }
            else
            {
                <p>No questions have been asked yet.</p>
            }
        </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string JobId { get; set; }

    private List<QuestionDto> _questions = new List<QuestionDto>();
    private int _questionCount => _questions?.Count() ?? 0;
    
    private string QuestionInput { get; set; } = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        _questions = (await FaqService.GetQuestions(JobId)).ToList();
    }

    private async void fetchQuestions()
    {
        _questions = (await FaqService.GetQuestions(JobId)).ToList();
    }

    private async void SubmitQuestion()
    {
        if (string.IsNullOrWhiteSpace(QuestionInput))
        {
            return;
        }

        await FaqService.CreateQuestion(JobId, QuestionInput);
        Console.WriteLine("Question submitted");
        QuestionInput = string.Empty;
        fetchQuestions();
    }

}
