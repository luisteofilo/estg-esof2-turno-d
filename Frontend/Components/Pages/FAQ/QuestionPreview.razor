@using ESOF.WebApp.DBLayer.Entities.FAQ
@using Common.Dtos.FAQ
@using Frontend.Services.Contracts
@inject NavigationManager Navigation
@inject IFAQService FaqService

@if (small)
{
    <div class="my-2 card p-2" @onclick="NavigateToQuestionPage">
        <h5>@question.QuestionText</h5>
    </div>
}
else
{

    <div class="my-2 card p-4" @onclick="NavigateToQuestionPage">
        <h4>@question.QuestionText</h4>
        @if (question.Answers.Any())
        {
            <ul class="list-group p-2 gap-1">
                @foreach (var answer in question.Answers)
                {
                    <li class="list-group-item p-2 mb-1">
                        <p>@answer.AnswerText</p>
                        <small>
                            <div class="d-flex justify-content-between">
                                <p class="text-muted">Answered by: @answer.AuthorEmail</p>
                                <p class="text-muted">@answer.CreatedAt</p>
                            </div>
                        </small>
                    </li>
                }
            </ul>
        }
        else
        {
            <p class="text-muted">No answers yet.</p>
        }

    </div>
}
@code {
    [Parameter]
    public QuestionDto question { get; set; }
    [Parameter]
    public String jobId { get; set; }
    [Parameter]
    public bool small { get; set; } = false;
    
    
    private List<AnswerDto> _answers = new List<AnswerDto>();

    protected override async Task OnInitializedAsync()
    {
        // TODO: fix this _answers = (await FaqService.GetAnswersForQuestion(jobId, question.QuestionId.ToString())).ToList();
    }

    void NavigateToQuestionPage()
    {
        Console.Out.WriteLine("Navigating to question page");
        if (small)
        {
            Navigation.NavigateTo($"{Navigation.Uri}/{jobId}/{question.QuestionId}");
        }
        else
        {
        Navigation.NavigateTo($"{Navigation.Uri}/{question.QuestionId}");
        }
    }
}